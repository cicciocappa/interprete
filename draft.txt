// src/interpreter.rs

use std::cell::RefCell;
use std::rc::Rc;

use crate::expr::{Expr, LiteralValue};
use crate::lexer::Token;
use crate::stmt::Stmt;
use crate::environment::Environment;

#[derive(Debug, Clone)]
pub enum RuntimeError {
    UnexpectedType(Token, String),
    UndefinedVariable(Token),
    InvalidOperand(Token, String),
    DivisionByZero(Token),
    NotCallable(Token),
    ArityMismatch {
        token: Token,
        expected: usize,
        got: usize,
    },
    // Add more runtime errors as needed
}

impl std::fmt::Display for RuntimeError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            RuntimeError::UnexpectedType(token, message) => {
                write!(f, "Line {}: Runtime Error: Unexpected type for '{}': {}", token.line, token.lexeme, message)
            }
            RuntimeError::UndefinedVariable(token) => {
                write!(f, "Line {}: Runtime Error: Undefined variable '{}'", token.line, token.lexeme)
            }
            RuntimeError::InvalidOperand(token, message) => {
                write!(f, "Line {}: Runtime Error: Invalid operand for '{}': {}", token.line, token.lexeme, message)
            }
            RuntimeError::DivisionByZero(token) => {
                write!(f, "Line {}: Runtime Error: Division by zero", token.line)
            }
            RuntimeError::NotCallable(token) => {
                write!(f, "Line {}: Runtime Error: Can only call functions and classes", token.line)
            }
            RuntimeError::ArityMismatch { token, expected, got } => {
                write!(
                    f,
                    "Line {}: Runtime Error: Expected {} arguments but got {}.",
                    token.line, expected, got
                )
            }
        }
    }
}

impl std::error::Error for RuntimeError {}

pub struct Interpreter {
    environment: Rc<RefCell<Environment>>,
}

impl Interpreter {
    pub fn new() -> Self {
        Interpreter {
            environment: Rc::new(RefCell::new(Environment::new())),
        }
    }

    pub fn interpret(&mut self, statements: &[Stmt]) -> Result<(), RuntimeError> {
        for statement in statements {
            self.execute(statement)?;
        }
        Ok(())
    }

    fn execute(&mut self, statement: &Stmt) -> Result<(), RuntimeError> {
        match statement {
            Stmt::Expression(expr) => {
                self.evaluate(expr)?;
                Ok(())
            }
            Stmt::Print(expr) => {
                let value = self.evaluate(expr)?;
                println!("{}", self.stringify(value));
                Ok(())
            }
            Stmt::Var(name, initializer) => {
                let value = match initializer {
                    Some(expr) => self.evaluate(expr)?,
                    None => LiteralValue::Nil,
                };
                self.environment.borrow_mut().define(name.lexeme.clone(), value);
                Ok(())
            }
            Stmt::Block(statements) => {
                let previous = Rc::clone(&self.environment);
                self.environment = Rc::new(RefCell::new(Environment::new_enclosed(previous)));
                let result = self.execute_block(statements);
                self.environment = Rc::clone(&previous); // Restore previous environment
                result
            }
            Stmt::If(condition, then_branch, else_branch) => {
                if self.is_truthy(&self.evaluate(condition)?) {
                    self.execute(then_branch)
                } else if let Some(else_stmt) = else_branch {
                    self.execute(else_stmt)
                } else {
                    Ok(())
                }
            }
            Stmt::While(condition, body) => {
                while self.is_truthy(&self.evaluate(condition)?) {
                    self.execute(body)?;
                }
                Ok(())
            }
            Stmt::Function(name, params, body) => {
                // Implementation for function declaration
                Ok(())
            }
            Stmt::Return(_keyword, value) => {
                // Implementation for return statement
                Ok(())
            }
            Stmt::Class(_name, _superclass, _methods) => {
                // Implementation for class declaration
                Ok(())
            }
        }
    }

    fn execute_block(&mut self, statements: &[Stmt]) -> Result<(), RuntimeError> {
        for statement in statements {
            self.execute(statement)?;
        }
        Ok(())
    }

    fn evaluate(&mut self, expression: &Expr) -> Result<LiteralValue, RuntimeError> {
        match expression {
            Expr::Literal(value) => Ok(value.clone().unwrap_or(LiteralValue::Nil)),
            Expr::Grouping(expr) => self.evaluate(expr),
            Expr::Unary(operator, right) => {
                let right_val = self.evaluate(right)?;
                match operator.token_type {
                    crate::lexer::TokenType::Minus => match right_val {
                        LiteralValue::Number(num) => Ok(LiteralValue::Number(-num)),
                        _ => Err(RuntimeError::UnexpectedType(
                            operator.clone(),
                            "Operand must be a number.".to_string(),
                        )),
                    },
                    crate::lexer::TokenType::Bang => Ok(LiteralValue::Bool(!self.is_truthy(&right_val))),
                    _ => unreachable!(), // Should not happen
                }
            }
            Expr::Binary(left, operator, right) => {
                let left_val = self.evaluate(left)?;
                let right_val = self.evaluate(right)?;

                match operator.token_type {
                    crate::lexer::TokenType::Minus => self.check_number_operands(operator, &left_val, &right_val)?,
                    crate::lexer::TokenType::Slash => {
                        self.check_number_operands(operator, &left_val, &right_val)?;
                        if let LiteralValue::Number(right_num) = right_val {
                            if right_num == 0.0 {
                                return Err(RuntimeError::DivisionByZero(operator.clone()));
                            }
                        }
                    }
                    crate::lexer::TokenType::Star => self.check_number_operands(operator, &left_val, &right_val)?,
                    crate::lexer::TokenType::Plus => match (&left_val, &right_val) {
                        (LiteralValue::Number(l), LiteralValue::Number(r)) => LiteralValue::Number(l + r),
                        (LiteralValue::String(l), LiteralValue::String(r)) => {
                            LiteralValue::String(format!("{}{}", l, r))
                        }
                        _ => {
                            return Err(RuntimeError::InvalidOperand(
                                operator.clone(),
                                "Operands must be two numbers or two strings.".to_string(),
                            ))
                        }
                    },
                    crate::lexer::TokenType::Greater => self.check_number_operands(operator, &left_val, &right_val)?,
                    crate::lexer::TokenType::GreaterEqual => self.check_number_operands(operator, &left_val, &right_val)?,
                    crate::lexer::TokenType::Less => self.check_number_operands(operator, &left_val, &right_val)?,
                    crate::lexer::TokenType::LessEqual => self.check_number_operands(operator, &left_val, &right_val)?,
                    crate::lexer::TokenType::BangEqual => LiteralValue::Bool(!self.is_equal(&left_val, &right_val)),
                    crate::lexer::TokenType::EqualEqual => LiteralValue::Bool(self.is_equal(&left_val, &right_val)),
                    _ => unreachable!(), // Should not happen
                }
                .into()
            }
            Expr::Variable(name) => self.lookup_variable(name),
            Expr::Assignment(name, value) => {
                let evaluated_value = self.evaluate(value)?;
                self.environment.borrow_mut().assign(name, evaluated_value.clone())?;
                Ok(evaluated_value)
            }
            Expr::Logical(left, operator, right) => {
                let left_val = self.evaluate(left)?;

                if operator.token_type == crate::lexer::TokenType::Or {
                    if self.is_truthy(&left_val) {
                        return Ok(left_val);
                    }
                } else if !self.is_truthy(&left_val) {
                    return Ok(left_val);
                }

                self.evaluate(right)
            }
            Expr::Call(_callee, _paren, _arguments) => {
                // Implementation for function calls
                Ok(LiteralValue::Nil)
            }
            Expr::Get(_object, _name) => {
                // Implementation for property access
                Ok(LiteralValue::Nil)
            }
            Expr::Set(_object, _name, _value) => {
                // Implementation for property assignment
                Ok(LiteralValue::Nil)
            }
            Expr::This(_keyword) => {
                // Implementation for 'this'
                Ok(LiteralValue::Nil)
            }
            Expr::Super(_keyword, _method) => {
                // Implementation for 'super'
                Ok(LiteralValue::Nil)
            }
        }
    }

    fn lookup_variable(&self, name: &Token) -> Result<LiteralValue, RuntimeError> {
        self.environment.borrow().get(name)
    }

    fn check_number_operands(
        &self,
        operator: &Token,
        left: &LiteralValue,
        right: &LiteralValue,
    ) -> Result<(), RuntimeError> {
        if matches!(left, LiteralValue::Number(_)) && matches!(right, LiteralValue::Number(_)) {
            Ok(())
        } else {
            Err(RuntimeError::UnexpectedType(
                operator.clone(),
                "Operands must be numbers.".to_string(),
            ))
        }
    }

    fn is_truthy(&self, value: &LiteralValue) -> bool {
        match value {
            LiteralValue::Nil => false,
            LiteralValue::Bool(b) => *b,
            _ => true,
        }
    }

    fn is_equal(&self, a: &LiteralValue, b: &LiteralValue) -> bool {
        match (a, b) {
            (LiteralValue::Nil, LiteralValue::Nil) => true,
            (LiteralValue::Number(na), LiteralValue::Number(nb)) => na == nb,
            (LiteralValue::String(sa), LiteralValue::String(sb)) => sa == sb,
            (LiteralValue::Bool(ba), LiteralValue::Bool(bb)) => ba == bb,
            _ => false,
        }
    }

    fn stringify(&self, value: LiteralValue) -> String {
        match value {
            LiteralValue::Nil => "nil".to_string(),
            LiteralValue::Number(n) => format!("{}", n),
            LiteralValue::String(s) => s,
            LiteralValue::Bool(b) => format!("{}", b),
        }
    }
}

// parser


// src/parser.rs

use crate::lexer::{Token, TokenType};
use crate::expr::{Expr, LiteralValue};
use crate::stmt::Stmt;

#[derive(Debug, Clone)]
pub enum ParseError {
    UnexpectedToken(Token, String),
    ExpectedToken(TokenType, Token),
    EndOfFile,
    // Add more specific parsing errors as needed
}

impl std::fmt::Display for ParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ParseError::UnexpectedToken(token, message) => {
                write!(f, "Line {}: Unexpected token '{}': {}", token.line, token.lexeme, message)
            }
            ParseError::ExpectedToken(expected, found) => {
                write!(f, "Line {}: Expected token '{:?}', but found '{}'", found.line, expected, found.lexeme)
            }
            ParseError::EndOfFile => write!(f, "Unexpected end of file"),
        }
    }
}

impl std::error::Error for ParseError {}

pub struct Parser {
    tokens: Vec<Token>,
    current: usize,
}

impl Parser {
    pub fn new(tokens: Vec<Token>) -> Self {
        Parser { tokens, current: 0 }
    }

    pub fn parse(&mut self) -> Result<Vec<Stmt>, ParseError> {
        let mut statements = Vec::new();
        while !self.is_at_end() {
            statements.push(self.declaration()?);
        }
        Ok(statements)
    }

    fn declaration(&mut self) -> Result<Stmt, ParseError> {
        if self.match_token(&[TokenType::Var]) {
            self.var_declaration()
        } else if self.match_token(&[TokenType::Fun]) {
            self.function("function")
        } else if self.match_token(&[TokenType::Class]) {
            self.class_declaration()
        }
        else {
            self.statement()
        }
    }

    fn class_declaration(&mut self) -> Result<Stmt, ParseError> {
        let name = self.consume(TokenType::Identifier, "Expect class name.")?;

        let superclass = if self.match_token(&[TokenType::Less]) {
            self.consume(TokenType::Identifier, "Expect superclass name.")?;
            Some(name.clone()) // Store the Token for now, resolution will handle it
        } else {
            None
        };

        self.consume(TokenType::LeftBrace, "Expect '{' before class body.")?;

        let mut methods = Vec::new();
        while !self.check(TokenType::RightBrace) && !self.is_at_end() {
            methods.push(self.function("method")?);
        }

        self.consume(TokenType::RightBrace, "Expect '}' after class body.")?;

        Ok(Stmt::Class(name, superclass, methods))
    }

    fn function(&mut self, kind: &str) -> Result<Stmt, ParseError> {
        let name = self.consume(TokenType::Identifier, &format!("Expect {} name.", kind))?;

        self.consume(TokenType::LeftParen, &format!("Expect '(' after {} name.", kind))?;

        let mut parameters = Vec::new();
        if !self.check(TokenType::RightParen) {
            loop {
                if parameters.len() >= 255 {
                    // You might want a more sophisticated error handling here
                    return Err(ParseError::UnexpectedToken(self.peek().clone(), "Cannot have more than 255 parameters.".to_string()));
                }
                parameters.push(self.consume(TokenType::Identifier, "Expect parameter name.")?);
                if !self.match_token(&[TokenType::Comma]) {
                    break;
                }
            }
        }
        self.consume(TokenType::RightParen, "Expect ')' after parameters.")?;

        self.consume(TokenType::LeftBrace, &format!("Expect '{{' before {} body.", kind))?;
        let body = self.block()?;
        Ok(Stmt::Function(name, parameters, body))
    }

    fn var_declaration(&mut self) -> Result<Stmt, ParseError> {
        let name = self.consume(TokenType::Identifier, "Expect variable name.")?;
        let initializer = if self.match_token(&[TokenType::Equal]) {
            Some(self.expression()?)
        } else {
            None
        };

        self.consume(TokenType::Semicolon, "Expect ';' after variable declaration.")?;
        Ok(Stmt::Var(name, initializer))
    }

    fn statement(&mut self) -> Result<Stmt, ParseError> {
        if self.match_token(&[TokenType::If]) {
            self.if_statement()
        } else if self.match_token(&[TokenType::Print]) {
            self.print_statement()
        } else if self.match_token(&[TokenType::LeftBrace]) {
            Ok(Stmt::Block(self.block()?))
        } else if self.match_token(&[TokenType::While]) {
            self.while_statement()
        } else if self.match_token(&[TokenType::For]) {
            self.for_statement()
        } else if self.match_token(&[TokenType::Return]) {
            self.return_statement()
        }
        else {
            self.expression_statement()
        }
    }

    fn return_statement(&mut self) -> Result<Stmt, ParseError> {
        let keyword = self.previous().clone();
        let value = if !self.check(TokenType::Semicolon) {
            Some(self.expression()?)
        } else {
            None
        };

        self.consume(TokenType::Semicolon, "Expect ';' after return value.")?;
        Ok(Stmt::Return(keyword, value))
    }

    fn for_statement(&mut self) -> Result<Stmt, ParseError> {
        self.consume(TokenType::LeftParen, "Expect '(' after 'for'.")?;

        let initializer = if self.match_token(&[TokenType::Semicolon]) {
            None
        } else if self.match_token(&[TokenType::Var]) {
            Some(self.var_declaration()?)
        } else {
            Some(self.expression_statement()?)
        };

        let condition = if !self.check(TokenType::Semicolon) {
            self.expression()?
        } else {
            Expr::Literal(None) // Equivalent to true
        };
        self.consume(TokenType::Semicolon, "Expect ';' after loop condition.")?;

        let increment = if !self.check(TokenType::RightParen) {
            Some(self.expression()?)
        } else {
            None
        };
        self.consume(TokenType::RightParen, "Expect ')' after for clauses.")?;

        let mut body = self.statement()?;

        if let Some(increment_expr) = increment {
            body = Stmt::Block(vec![body, Stmt::Expression(increment_expr)]);
        }

        body = Stmt::While(condition, Box::new(body));

        if let Some(initializer_stmt) = initializer {
            body = Stmt::Block(vec![initializer_stmt, body]);
        }

        Ok(body)
    }

    fn while_statement(&mut self) -> Result<Stmt, ParseError> {
        self.consume(TokenType::LeftParen, "Expect '(' after 'while'.")?;
        let condition = self.expression()?;
        self.consume(TokenType::RightParen, "Expect ')' after condition.")?;
        let body = self.statement()?;
        Ok(Stmt::While(condition, Box::new(body)))
    }

    fn block(&mut self) -> Result<Vec<Stmt>, ParseError> {
        let mut statements = Vec::new();
        while !self.check(TokenType::RightBrace) && !self.is_at_end() {
            statements.push(self.declaration()?);
        }
        self.consume(TokenType::RightBrace, "Expect '}' after block.")?;
        Ok(statements)
    }

    fn if_statement(&mut self) -> Result<Stmt, ParseError> {
        self.consume(TokenType::LeftParen, "Expect '(' after 'if'.")?;
        let condition = self.expression()?;
        self.consume(TokenType::RightParen, "Expect ')' after if condition.")?;

        let then_branch = self.statement()?;
        let else_branch = if self.match_token(&[TokenType::Else]) {
            Some(Box::new(self.statement()?))
        } else {
            None
        };

        Ok(Stmt::If(condition, Box::new(then_branch), else_branch))
    }

    fn print_statement(&mut self) -> Result<Stmt, ParseError> {
        let value = self.expression()?;
        self.consume(TokenType::Semicolon, "Expect ';' after value.")?;
        Ok(Stmt::Print(value))
    }

    fn expression_statement(&mut self) -> Result<Stmt, ParseError> {
        let expr = self.expression()?;
        self.consume(TokenType::Semicolon, "Expect ';' after expression.")?;
        Ok(Stmt::Expression(expr))
    }

    fn expression(&mut self) -> Result<Expr, ParseError> {
        self.assignment()
    }

    fn assignment(&mut self) -> Result<Expr, ParseError> {
        let expr = self.or()?;

        if self.match_token(&[TokenType::Equal]) {
            let equals = self.previous().clone();
            let value = self.assignment()?;

            match expr {
                Expr::Variable(name) => Ok(Expr::Assignment(name, Box::new(value))),
                Expr::Get(object, name) => Ok(Expr::Set(object, name, Box::new(value))),
                _ => Err(ParseError::UnexpectedToken(equals, "Invalid assignment target.".to_string())),
            }
        } else {
            Ok(expr)
        }
    }

    fn or(&mut self) -> Result<Expr, ParseError> {
        let mut expr = self.and()?;

        while self.match_token(&[TokenType::Or]) {
            let operator = self.previous().clone();
            let right = self.and()?;
            expr = Expr::Logical(Box::new(expr), operator, Box::new(right));
        }

        Ok(expr)
    }

    fn and(&mut self) -> Result<Expr, ParseError> {
        let mut expr = self.equality()?;

        while self.match_token(&[TokenType::And]) {
            let operator = self.previous().clone();
            let right = self.equality()?;
            expr = Expr::Logical(Box::new(expr), operator, Box::new(right));
        }

        Ok(expr)
    }

    fn equality(&mut self) -> Result<Expr, ParseError> {
        let mut expr = self.comparison()?;

        while self.match_token(&[TokenType::BangEqual, TokenType::EqualEqual]) {
            let operator = self.previous().clone();
            let right = self.comparison()?;
            expr = Expr::Binary(Box::new(expr), operator, Box::new(right));
        }

        Ok(expr)
    }

    fn comparison(&mut self) -> Result<Expr, ParseError> {
        let mut expr = self.term()?;

        while self.match_token(&[TokenType::Greater, TokenType::GreaterEqual, TokenType::Less, TokenType::LessEqual]) {
            let operator = self.previous().clone();
            let right = self.term()?;
            expr = Expr::Binary(Box::new(expr), operator, Box::new(right));
        }

        Ok(expr)
    }

    fn term(&mut self) -> Result<Expr, ParseError> {
        let mut expr = self.factor()?;

        while self.match_token(&[TokenType::Minus, TokenType::Plus]) {
            let operator = self.previous().clone();
            let right = self.factor()?;
            expr = Expr::Binary(Box::new(expr), operator, Box::new(right));
        }

        Ok(expr)
    }

    fn factor(&mut self) -> Result<Expr, ParseError> {
        let mut expr = self.unary()?;

        while self.match_token(&[TokenType::Slash, TokenType::Star]) {
            let operator = self.previous().clone();
            let right = self.unary()?;
            expr = Expr::Binary(Box::new(expr), operator, Box::new(right));
        }

        Ok(expr)
    }

    fn unary(&mut self) -> Result<Expr, ParseError> {
        if self.match_token(&[TokenType::Bang, TokenType::Minus]) {
            let operator = self.previous().clone();
            let right = self.unary()?;
            Ok(Expr::Unary(operator, Box::new(right)))
        } else {
            self.call()
        }
    }

    fn call(&mut self) -> Result<Expr, ParseError> {
        let mut expr = self.primary()?;

        loop {
            if self.match_token(&[TokenType::LeftParen]) {
                expr = self.finish_call(expr)?;
            } else if self.match_token(&[TokenType::Dot]) {
                let name = self.consume(TokenType::Identifier, "Expect property name after '.'.")?;
                expr = Expr::Get(Box::new(expr), name);
            } else {
                break;
            }
        }

        Ok(expr)
    }

    fn finish_call(&mut self, callee: Expr) -> Result<Expr, ParseError> {
        let mut arguments = Vec::new();
        if !self.check(TokenType::RightParen) {
            loop {
                if arguments.len() >= 255 {
                    return Err(ParseError::UnexpectedToken(self.peek().clone(), "Cannot have more than 255 arguments.".to_string()));
                }
                arguments.push(self.expression()?);
                if !self.match_token(&[TokenType::Comma]) {
                    break;
                }
            }
        }

        let paren = self.consume(TokenType::RightParen, "Expect ')' after arguments.")?;

        Ok(Expr::Call(Box::new(callee), paren, arguments))
    }

    fn primary(&mut self) -> Result<Expr, ParseError> {
        if self.match_token(&[TokenType::False]) {
            Ok(Expr::Literal(Some(LiteralValue::Bool(false))))
        } else if self.match_token(&[TokenType::True]) {
            Ok(Expr::Literal(Some(LiteralValue::Bool(true))))
        } else if self.match_token(&[TokenType::Nil]) {
            Ok(Expr::Literal(None))
        } else if self.match_token(&[TokenType::Number, TokenType::String]) {
            match self.previous().token_type {
                TokenType::Number => {
                    if let Ok(num) = self.previous().lexeme.parse::<f64>() {
                        Ok(Expr::Literal(Some(LiteralValue::Number(num))))
                    } else {
                        Err(ParseError::UnexpectedToken(self.previous().clone(), "Invalid number format".to_string()))
                    }
                }
                TokenType::String => Ok(Expr::Literal(Some(LiteralValue::String(
                    self.previous().lexeme[1..self.previous().lexeme.len() - 1].to_string(),
                )))),
                _ => unreachable!(),
            }
        } else if self.match_token(&[TokenType::This]) {
            Ok(Expr::This(self.previous().clone()))
        }
        else if self.match_token(&[TokenType::Super]) {
            let keyword = self.previous().clone();
            self.consume(TokenType::Dot, "Expect '.' after 'super'.")?;
            let method = self.consume(TokenType::Identifier, "Expect superclass method name.")?;
            Ok(Expr::Super(keyword, method))
        }
        else if self.match_token(&[TokenType::Identifier]) {
            Ok(Expr::Variable(self.previous().clone()))
        } else if self.match_token(&[TokenType::LeftParen]) {
            let expr = self.expression()?;
            self.consume(TokenType::RightParen, "Expect ')' after expression.")?;
            Ok(Expr::Grouping(Box::new(expr)))
        } else {
            Err(ParseError::UnexpectedToken(self.peek().clone(), "Expect expression.".to_string()))
        }
    }

    // Helper functions

    fn match_token(&mut self, types: &[TokenType]) -> bool {
        if types.iter().any(|&t| self.check(t)) {
            self.advance();
            true
        } else {
            false
        }
    }

    fn consume(&mut self, token_type: TokenType, message: &str) -> Result<Token, ParseError> {
        if self.check(token_type) {
            Ok(self.advance().clone())
        } else {
            Err(ParseError::ExpectedToken(token_type, self.peek().clone()))
        }
    }

    fn check(&self, token_type: TokenType) -> bool {
        if self.is_at_end() {
            false
        } else {
            self.peek().token_type == token_type
        }
    }

    fn advance(&mut self) -> &Token {
        if !self.is_at_end() {
            self.current += 1;
        }
        self.previous()
    }

    fn is_at_end(&self) -> bool {
        self.peek().token_type == TokenType::Eof
    }

    fn peek(&self) -> &Token {
        &self.tokens[self.current]
    }

    fn previous(&self) -> &Token {
        &self.tokens[self.current - 1]
    }

    // Error synchronization - discards tokens until a statement boundary
    fn synchronize(&mut self) {
        self.advance();

        while !self.is_at_end() {
            if self.previous().token_type == TokenType::Semicolon {
                return;
            }

            match self.peek().token_type {
                TokenType::Class | TokenType::Fun | TokenType::Var | TokenType::For |
                TokenType::If | TokenType::While | TokenType::Print | TokenType::Return => return,
                _ => (),
            }

            self.advance();
        }
    }
}

// src/environment.rs

use std::collections::HashMap;
use crate::lexer::Token;
use crate::interpreter::LiteralValue;
use crate::interpreter::RuntimeError; // Assuming you have a RuntimeError

#[derive(Debug, Clone)]
pub struct Environment {
    values: HashMap<String, LiteralValue>,
    enclosing: Option<Box<Environment>>,
}

impl Environment {
    pub fn new() -> Self {
        Environment {
            values: HashMap::new(),
            enclosing: None,
        }
    }

    pub fn new_enclosed(enclosing: Environment) -> Self {
        Environment {
            values: HashMap::new(),
            enclosing: Some(Box::new(enclosing)),
        }
    }

    pub fn define(&mut self, name: String, value: LiteralValue) {
        self.values.insert(name, value);
    }

    pub fn assign(&mut self, name: &Token, value: LiteralValue) -> Result<(), RuntimeError> {
        if self.values.contains_key(&name.lexeme) {
            self.values.insert(name.lexeme.clone(), value);
            Ok(())
        } else if let Some(enclosing) = &mut self.enclosing {
            enclosing.assign(name, value)
        } else {
            Err(RuntimeError::UndefinedVariable(name.clone()))
        }
    }

    pub fn get(&self, name: &Token) -> Result<LiteralValue, RuntimeError> {
        if let Some(value) = self.values.get(&name.lexeme) {
            Ok(value.clone())
        } else if let Some(enclosing) = &self.enclosing {
            enclosing.get(name)
        } else {
            Err(RuntimeError::UndefinedVariable(name.clone()))
        }
    }

    // Helper methods for resolving variables at specific distances (used by the Resolver)
    pub fn ancestor(&mut self, distance: usize) -> &mut Environment {
        let mut environment = self;
        for _ in 0..distance {
            match &mut environment.enclosing {
                Some(enc) => environment = enc.as_mut(),
                None => panic!("Error: Reached top-level environment unexpectedly"), // Should not happen if resolver is correct
            }
        }
        environment
    }

    pub fn assign_at(&mut self, distance: usize, name: &Token, value: LiteralValue) {
        self.ancestor(distance).values.insert(name.lexeme.clone(), value);
    }

    pub fn get_at(&self, distance: usize, name: &Token) -> Result<LiteralValue, RuntimeError> {
        let ancestor = self.get_ancestor(distance);
        ancestor.values.get(&name.lexeme).cloned().ok_or_else(|| RuntimeError::UndefinedVariable(name.clone()))
    }

    fn get_ancestor(&self, distance: usize) -> &Environment {
        let mut environment = self;
        for _ in 0..distance {
            match &environment.enclosing {
                Some(enc) => environment = enc.as_ref(),
                None => panic!("Error: Reached top-level environment unexpectedly"), // Should not happen if resolver is correct
            }
        }
        environment
    }
}