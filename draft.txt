// src/interpreter.rs

use std::cell::RefCell;
use std::rc::Rc;

use crate::expr::{Expr, LiteralValue};
use crate::lexer::Token;
use crate::stmt::Stmt;
use crate::environment::Environment;

#[derive(Debug, Clone)]
pub enum RuntimeError {
    UnexpectedType(Token, String),
    UndefinedVariable(Token),
    InvalidOperand(Token, String),
    DivisionByZero(Token),
    NotCallable(Token),
    ArityMismatch {
        token: Token,
        expected: usize,
        got: usize,
    },
    // Add more runtime errors as needed
}

impl std::fmt::Display for RuntimeError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            RuntimeError::UnexpectedType(token, message) => {
                write!(f, "Line {}: Runtime Error: Unexpected type for '{}': {}", token.line, token.lexeme, message)
            }
            RuntimeError::UndefinedVariable(token) => {
                write!(f, "Line {}: Runtime Error: Undefined variable '{}'", token.line, token.lexeme)
            }
            RuntimeError::InvalidOperand(token, message) => {
                write!(f, "Line {}: Runtime Error: Invalid operand for '{}': {}", token.line, token.lexeme, message)
            }
            RuntimeError::DivisionByZero(token) => {
                write!(f, "Line {}: Runtime Error: Division by zero", token.line)
            }
            RuntimeError::NotCallable(token) => {
                write!(f, "Line {}: Runtime Error: Can only call functions and classes", token.line)
            }
            RuntimeError::ArityMismatch { token, expected, got } => {
                write!(
                    f,
                    "Line {}: Runtime Error: Expected {} arguments but got {}.",
                    token.line, expected, got
                )
            }
        }
    }
}

impl std::error::Error for RuntimeError {}

pub struct Interpreter {
    environment: Rc<RefCell<Environment>>,
}

impl Interpreter {
    pub fn new() -> Self {
        Interpreter {
            environment: Rc::new(RefCell::new(Environment::new())),
        }
    }

    pub fn interpret(&mut self, statements: &[Stmt]) -> Result<(), RuntimeError> {
        for statement in statements {
            self.execute(statement)?;
        }
        Ok(())
    }

    fn execute(&mut self, statement: &Stmt) -> Result<(), RuntimeError> {
        match statement {
            Stmt::Expression(expr) => {
                self.evaluate(expr)?;
                Ok(())
            }
            Stmt::Print(expr) => {
                let value = self.evaluate(expr)?;
                println!("{}", self.stringify(value));
                Ok(())
            }
            Stmt::Var(name, initializer) => {
                let value = match initializer {
                    Some(expr) => self.evaluate(expr)?,
                    None => LiteralValue::Nil,
                };
                self.environment.borrow_mut().define(name.lexeme.clone(), value);
                Ok(())
            }
            Stmt::Block(statements) => {
                let previous = Rc::clone(&self.environment);
                self.environment = Rc::new(RefCell::new(Environment::new_enclosed(previous)));
                let result = self.execute_block(statements);
                self.environment = Rc::clone(&previous); // Restore previous environment
                result
            }
            Stmt::If(condition, then_branch, else_branch) => {
                if self.is_truthy(&self.evaluate(condition)?) {
                    self.execute(then_branch)
                } else if let Some(else_stmt) = else_branch {
                    self.execute(else_stmt)
                } else {
                    Ok(())
                }
            }
            Stmt::While(condition, body) => {
                while self.is_truthy(&self.evaluate(condition)?) {
                    self.execute(body)?;
                }
                Ok(())
            }
            Stmt::Function(name, params, body) => {
                // Implementation for function declaration
                Ok(())
            }
            Stmt::Return(_keyword, value) => {
                // Implementation for return statement
                Ok(())
            }
            Stmt::Class(_name, _superclass, _methods) => {
                // Implementation for class declaration
                Ok(())
            }
        }
    }

    fn execute_block(&mut self, statements: &[Stmt]) -> Result<(), RuntimeError> {
        for statement in statements {
            self.execute(statement)?;
        }
        Ok(())
    }

    fn evaluate(&mut self, expression: &Expr) -> Result<LiteralValue, RuntimeError> {
        match expression {
            Expr::Literal(value) => Ok(value.clone().unwrap_or(LiteralValue::Nil)),
            Expr::Grouping(expr) => self.evaluate(expr),
            Expr::Unary(operator, right) => {
                let right_val = self.evaluate(right)?;
                match operator.token_type {
                    crate::lexer::TokenType::Minus => match right_val {
                        LiteralValue::Number(num) => Ok(LiteralValue::Number(-num)),
                        _ => Err(RuntimeError::UnexpectedType(
                            operator.clone(),
                            "Operand must be a number.".to_string(),
                        )),
                    },
                    crate::lexer::TokenType::Bang => Ok(LiteralValue::Bool(!self.is_truthy(&right_val))),
                    _ => unreachable!(), // Should not happen
                }
            }
            Expr::Binary(left, operator, right) => {
                let left_val = self.evaluate(left)?;
                let right_val = self.evaluate(right)?;

                match operator.token_type {
                    crate::lexer::TokenType::Minus => self.check_number_operands(operator, &left_val, &right_val)?,
                    crate::lexer::TokenType::Slash => {
                        self.check_number_operands(operator, &left_val, &right_val)?;
                        if let LiteralValue::Number(right_num) = right_val {
                            if right_num == 0.0 {
                                return Err(RuntimeError::DivisionByZero(operator.clone()));
                            }
                        }
                    }
                    crate::lexer::TokenType::Star => self.check_number_operands(operator, &left_val, &right_val)?,
                    crate::lexer::TokenType::Plus => match (&left_val, &right_val) {
                        (LiteralValue::Number(l), LiteralValue::Number(r)) => LiteralValue::Number(l + r),
                        (LiteralValue::String(l), LiteralValue::String(r)) => {
                            LiteralValue::String(format!("{}{}", l, r))
                        }
                        _ => {
                            return Err(RuntimeError::InvalidOperand(
                                operator.clone(),
                                "Operands must be two numbers or two strings.".to_string(),
                            ))
                        }
                    },
                    crate::lexer::TokenType::Greater => self.check_number_operands(operator, &left_val, &right_val)?,
                    crate::lexer::TokenType::GreaterEqual => self.check_number_operands(operator, &left_val, &right_val)?,
                    crate::lexer::TokenType::Less => self.check_number_operands(operator, &left_val, &right_val)?,
                    crate::lexer::TokenType::LessEqual => self.check_number_operands(operator, &left_val, &right_val)?,
                    crate::lexer::TokenType::BangEqual => LiteralValue::Bool(!self.is_equal(&left_val, &right_val)),
                    crate::lexer::TokenType::EqualEqual => LiteralValue::Bool(self.is_equal(&left_val, &right_val)),
                    _ => unreachable!(), // Should not happen
                }
                .into()
            }
            Expr::Variable(name) => self.lookup_variable(name),
            Expr::Assignment(name, value) => {
                let evaluated_value = self.evaluate(value)?;
                self.environment.borrow_mut().assign(name, evaluated_value.clone())?;
                Ok(evaluated_value)
            }
            Expr::Logical(left, operator, right) => {
                let left_val = self.evaluate(left)?;

                if operator.token_type == crate::lexer::TokenType::Or {
                    if self.is_truthy(&left_val) {
                        return Ok(left_val);
                    }
                } else if !self.is_truthy(&left_val) {
                    return Ok(left_val);
                }

                self.evaluate(right)
            }
            Expr::Call(_callee, _paren, _arguments) => {
                // Implementation for function calls
                Ok(LiteralValue::Nil)
            }
            Expr::Get(_object, _name) => {
                // Implementation for property access
                Ok(LiteralValue::Nil)
            }
            Expr::Set(_object, _name, _value) => {
                // Implementation for property assignment
                Ok(LiteralValue::Nil)
            }
            Expr::This(_keyword) => {
                // Implementation for 'this'
                Ok(LiteralValue::Nil)
            }
            Expr::Super(_keyword, _method) => {
                // Implementation for 'super'
                Ok(LiteralValue::Nil)
            }
        }
    }

    fn lookup_variable(&self, name: &Token) -> Result<LiteralValue, RuntimeError> {
        self.environment.borrow().get(name)
    }

    fn check_number_operands(
        &self,
        operator: &Token,
        left: &LiteralValue,
        right: &LiteralValue,
    ) -> Result<(), RuntimeError> {
        if matches!(left, LiteralValue::Number(_)) && matches!(right, LiteralValue::Number(_)) {
            Ok(())
        } else {
            Err(RuntimeError::UnexpectedType(
                operator.clone(),
                "Operands must be numbers.".to_string(),
            ))
        }
    }

    fn is_truthy(&self, value: &LiteralValue) -> bool {
        match value {
            LiteralValue::Nil => false,
            LiteralValue::Bool(b) => *b,
            _ => true,
        }
    }

    fn is_equal(&self, a: &LiteralValue, b: &LiteralValue) -> bool {
        match (a, b) {
            (LiteralValue::Nil, LiteralValue::Nil) => true,
            (LiteralValue::Number(na), LiteralValue::Number(nb)) => na == nb,
            (LiteralValue::String(sa), LiteralValue::String(sb)) => sa == sb,
            (LiteralValue::Bool(ba), LiteralValue::Bool(bb)) => ba == bb,
            _ => false,
        }
    }

    fn stringify(&self, value: LiteralValue) -> String {
        match value {
            LiteralValue::Nil => "nil".to_string(),
            LiteralValue::Number(n) => format!("{}", n),
            LiteralValue::String(s) => s,
            LiteralValue::Bool(b) => format!("{}", b),
        }
    }
}